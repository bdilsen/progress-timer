{"ts":1359435683526,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//PROGRESS CLASS\nvar progress = (function() {\n\t//PRIVATE VARIABLES\n\tvar input = {\n\t\t\"barWidth\": 500,\n\t\t\"bars\": [\n\t\t\t/*{\n\t\t\t\"type\": \"counter\",\n\t\t\t\"name\": \"Manual\",\n\t\t\t\"key\": \"sdffbs3\",\n\t\t\t\"note\": \"...and a note\",\n\t\t\t\"start\": 0,\n\t\t\t\"end\": 100,\n\t\t\t\"current\": 30\n\t\t}*/\n\t\t\t],\n\t\t\"settings\": {\n\t\t\t\"lastTip\" : -1,\n\t\t\t\"tipShow\" : true\n\t\t}\n\t},\n\topts = {\n\t\tdebug: true,\n\t\tchrome: false\n\t},\n\ttips = [\n\t{\n\t\"preamble\":\"Dueling bars 2\",\n\t\"tip\":\"Sometimes it's useful to have a counter bar next to a clock or timer. If you have a deadline to hit by the end of your counter (e.g. \\\"write 400 words in 2 hours\\\"), you can make sure that you stay on track.\",\n\t\"image\":\"images/dueling-bars.png\"\n\t},\n\t{\n\t\"preamble\":\"Idea: tracking your weight loss.\",\n\t\"tip\":\"Did you know that progress bars can count down? Set the start of the bar as your starting weight, and the end as your target.\"\n\t}, \n\t{\n\t\"preamble\":\"Sorting progress bars\",\n\t\"tip\":\"Click and drag on an empty spot of a progress bar slip to sort progress bars to your preferred order.\"\n\t}, \n\t{\n\t\"preamble\":\"Super-secret pro-tip: Curly notation\",\n\t\"tip\":\"If you write numbers between curly braces in the description of a counter timer (e.g. \\\"{10}\\\"), the progress bar will add them up and set them as the current progress. This is an experimental feature, but quite useful.\"\n\t},\n\t{\n\t\"preamble\":\"Organize your progress bars\",\n\t\"tip\":\"You can change the order of progress bars by dragging them.\"\n\t}\n\t\n\t],\n\tsample_items = [\n\t\t\t\t{\"title\": \"Losing Weight\", \"description\":\"Tracking my progress to my goal weight.\",\"start\":220, \"current\":190, \"end\":180},\n\t\t\t\t{\"title\": \"Essay Progress\", \"description\":\"Toward a max word count of 6000\", \"start\":0, \"current\":5000, \"end\":6000},\n\t\t\t\t{\"title\": \"Days until Christmas\", \"description\":\"\", \"start\":\"Dec 1\", \"current\":\"Dec 18\", \"end\":\"Dec 24\"},\n\t\t\t\t{\"title\": \"Work Day\", \"start\":0, \"description\":\"The end is coming..\", \"current\":6, \"end\":8},\n\t\t\t\t{\"title\": \"Pokemon Collection\", \"description\":\"Gotta catch 'em all!\", \"start\":0, \"current\":150, \"end\":100}\n\t\t\t],\n\t\tpageWidth = document.width <= 1200 ? document.width : 1200,\n\t\tpageMargin = 170,\n\t\tcontainerWidth = pageWidth - pageMargin * 2,\n\t\tslipMargin = 10,\n\t\tslipWidth = containerWidth - slipMargin * 2,\n\t\tbarWidth = slipWidth - slipMargin * 2,\n\n\t//PRIVATE FUNCTIONS\n\t\t//UTILITY FUNCTIONS\n\t\tlog = function() {\n\t\t\tif (opts.debug === true) {\n\t\t\t\tlog.history = log.history || [];\n\t\t\t\tlog.history.push(arguments);\n\t\t\t\tif (this.console) {\n\t\t\t\t\tconsole.log(Array.prototype.slice.call(arguments));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmsToday = function(date) {\n\t\t\t/* Return the number of milliseconds since the start of the day. */\n\t\t\tif (typeof date == 'number') {\n\t\t\t\tdate = new Date(date);\n\t\t\t}\n\t\t\tv = new Date(date);\n\t\t\tv.setHours(0,0,0,0);\n\t\t\treturn (date.getTime() - v.getTime() );\n\t\t},\n\t\tsumArr = function(arr) {\n\t\t\t/* Sum all the values in an array */\n\t\t\tvar sum = 0;\n\t\t\tfor (var i=0; i<arr.length; i++) {\n\t\t\t\tsum = sum + arr[i];\n\t\t\t}\n\t\t\treturn sum;\n\t\t},\n\t\tparseDescription = function(text) {\n\t\t\t/*\n\t\t\tCheck description for numbers in the format {0}. All numbers between curly braces are added and the value is returned.\n\t\t\t*/\n\t\t\tvar re=/\\{(-?[\\d\\.]+?)\\}/g, //Find integers between curly braces (including negative numbers and decimals)\n\t\t\t\tvalues = text.match(re),\n\t\t\t\tnewCount = null;\n\t\t\t\n\t\t\tif (values !== null) {\t\n\t\t\t\t/*\n\t\t\t\tCount the max precision after the decimal place, then use toFixed() to overcome floating point numbers problems\n\t\t\t\t*/\n\t\t\t\tmax_precision = 0;\n\t\t\t\tvalues = values.map(function(d){ \n\t\t\t\t\tvar v = d.replace(\"{\", \"\").replace(\"}\", \"\");\n\t\t\t\t\tdecimals = v.split(\".\");\n\t\t\t\t\tprecision = decimals.length > 1 ? decimals[1].length : 0;\n\t\t\t\t\tmax_precision = precision > max_precision ? precision : max_precision;\n\t\t\t\t\treturn parseFloat(v);\n\t\t\t\t\t});\n\t\t\t\treturn parseFloat(sumArr(values).toFixed(max_precision));\n\t\t\t} else {\n\t\t\t\treturn null;\t\n\t\t\t}\n\t\t\t\n\t\t},\n\t\tformat = function(value, type) {\n\t\t\t//Format text based on the bar type\n\t\t\tif (type === \"counter\") {\n\t\t\t\treturn value;\n\t\t\t} else if (type === \"clock\") {\n\t\t\t\tdate = new Date(value);\n\t\t\t\tvar d = $.datepicker.formatDate('mm-dd', date),\n\t\t\t\t\tt = date.toLocaleTimeString();\n\t\t\t\treturn d + \" \" + t;\n\t\t\t} else if (type === \"timer\") {\n\t\t\t\ttime = msToFullTime(value, true);\n\t\t\t\treturn time.hours + \":\" + leadingZero(time.minutes) + \":\" + leadingZero(time.seconds);\n\t\t\t} else {\n\t\t\t\tthrow \"No valid bar type\";\n\t\t\t}\n\t\t},\n\t\tprogressLocation = function(data, fullWidth) {\n\t\t\tcurrent = (function() {\n\t\t\t\tif (data.type === \"timer\" && data.progress.start) {\n\t\t\t\t\treturn data.current + new Date().getTime() - data.progress.start;\n\t\t\t\t} else {\n\t\t\t\t\treturn data.current;\n\t\t\t\t}\n\t\t\t})();\n\t\t\tvar countUp = (data.start < data.end);\n\t\t\tif (current <= data.start && countUp) {\n\t\t\t\tpercentage = 0;\n\t\t\t} \n\t\t\telse if (current >= data.end && countUp) {\n\t\t\t\tpercentage = 1;\n\t\t\t} \n\t\t\telse if (current <= data.end && !countUp) {\n\t\t\t\tpercentage = 1;\n\t\t\t} \n\t\t\telse if (current >= data.start && !countUp) {\n\t\t\t\tpercentage = 0;\n\t\t\t} else {\n\t\t\t\tpercentage = countUp ? (current - data.start) / (data.end - data.start) : (data.start - current) / (data.start - data.end);\n\t\t\t}\n\t\t\tvar location = percentage * fullWidth;\n\t\t\treturn location;\n\t\t},\n\t\tgenerateKey = function() {\n\t\t\treturn Math.floor(\n\t\t\tMath.random() * 0x1000000).toString(16);\n\t\t},\n\t\tleadingZero = function(integer) {\n\t\t\treturn (integer > 9 ? \"\" + integer : \"0\" + integer);\n\t\t},\n\t\tgetCurrentVal = function(d) {\n\t\t\tvar currentTime = (new Date()).getTime(),\n\t\t\t\tc = d.current;\n\t\t\tif (d.type === \"clock\") {\n\t\t\t\tc = currentTime;\n\t\t\t} else if (d.type === \"timer\" && d.progress.start) {\n\t\t\t\tc = d.current + (currentTime - d.progress.start);\n\t\t\t}\n\t\t\treturn c;\n\t\t},\n\t\tformatDate = function(date) {\n\t\t\tvar y = date.getFullYear(),\n\t\t\t\tm = 1 + date.getMonth(),\n\t\t\t\td = date.getDate();\n\t\t\tm = leadingZero(m);\n\t\t\td = leadingZero(d);\n\t\t\treturn y + \"-\" + m + \"-\" + d;\n\t\t},\n\t\tformatHour = function(date) {\n\t\t\tvar h = date.getHours(),\n\t\t\t\tm = leadingZero(date.getMinutes());\n\t\t\treturn h + \":\" + m;\n\t\t},\n\t\tmsToFullTime = function(milliseconds, fullHours) {\n\t\t\thours = Math.floor(milliseconds / (1000 * 60 * 60));\n\t\t\tminutes = Math.floor(milliseconds / (1000 * 60)) % 60;\n\t\t\tseconds = Math.floor(milliseconds / (1000)) % 60;\n\t\t\tif (fullHours !== true) {\n\t\t\t\thours = hours % 24;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t\"hours\": hours,\n\t\t\t\t\"minutes\": minutes,\n\t\t\t\t\"seconds\": seconds\n\t\t\t};\n\t\t},\n\t\tcheckDataQuality = function(type, index) {\n\t\t\t/*\n\t\t\tCheck if data in the add dialog is possible, if not then\n\t\t\tshow warning.\n\t\t\t\n\t\t\tAssumes dialog has class \"dialog\".\n\t\t*/\n\t\t\t$(\".ui-dialog-buttonpane .errors\").remove();\n\t\t\t$(\".ui-dialog-buttonpane .alerts\").remove();\n\t\t\tvar values = {}, errors = [],\n\t\t\t\talerts = [],\n\t\t\t\twarnings = [],\n\t\t\t\tvalues = getDialogValues(type, index);\n\t\t\tif (type === \"clock\") {\n\t\t\t\tif (values.start > values.end) {\n\t\t\t\t\terrors.push(\"Start time must be before end time. You can't move back in time, man.\");\n\t\t\t\t} else if (values.start === values.end) {\n\t\t\t\t\terrors.push(\"Start and end times need to be different.\");\n\t\t\t\t} else if (values.current > values.end) {\n\t\t\t\t\talerts.push(\"Hey, not to alarm you, but your end time is in the past.\");\n\t\t\t\t}\n\t\t\t} else if (type === \"timer\") {\n\t\t\t\tif (values.end < values.start) {\n\t\t\t\t\terrors.push(\"It's not a back-in-timer, just a plain timer.\");\n\t\t\t\t} else if (values.end === values.start) {\n\t\t\t\t\terrors.push(\"You can't have a null time progress bar.\");\n\t\t\t\t} else if (values.current > values.end) {\n\t\t\t\t\talerts.push(\"Hey, your timer has already ended. Maybe you want to reset?\");\n\t\t\t\t}\n\t\t\t} else if (type === \"counter\") {\n\t\t\t\tvar low = values.start,\n\t\t\t\t\thigh = values.end,\n\t\t\t\t\tcurrent = values.current;\n\t\t\t\tif (low > high) {\n\t\t\t\t\talerts.push(\"This counter will count down.\");\n\t\t\t\t\tlow = values.end;\n\t\t\t\t\thigh = values.start;\n\t\t\t\t} else if (low === high) {\n\t\t\t\t\terrors.push(\"Start and end values need to be different\");\n\t\t\t\t}\n\t\t\t\tif (current > high) {\n\t\t\t\t\talerts.push(\"Note that current value is higher than end point.\");\n\t\t\t\t} else if (current < low) {\n\t\t\t\t\talerts.push(\"Note that current value is lower than start point.\");\n\t\t\t\t}\n\t\t\t\tif (current < 0 || low < 0 || high < 0) {\n\t\t\t\t\terrors.push(\"Sorry, values cannot be below zero. Did you know that you can count down though?\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (errors.length >= 1) {\n\t\t\t\t$(\".ui-dialog-buttonpane\")\n\t\t\t\t\t.append(\"<div class='errors ui-state-error'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'></span></div>\");\n\t\t\t\t$(\":button:contains('OK')\").prop(\"disabled\", true).addClass(\"ui-state-disabled\");\n\t\t\t} else {\n\t\t\t\t$(\":button:contains('OK')\").prop(\"disabled\", false).removeClass(\"ui-state-disabled\");\n\t\t\t}\n\t\t\t\n\t\t\tif (alerts.length >= 1) {\n\t\t\t\t$(\".ui-dialog-buttonpane\")\n\t\t\t\t\t.append(\"<div class='alerts ui-state-highlight'><span class='ui-icon ui-icon-info' style='float: left; margin-right: .3em;'></span></div>\");\n\t\t\t}\n\t\t\tfor (var i = 0; i < errors.length; i++) {\n\t\t\t\tvar error = errors[i];\n\t\t\t\t$(\".ui-dialog-buttonpane .errors\").append(error + \"</br>\");\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < alerts.length; i++) {\n\t\t\t\tvar alert = alerts[i];\n\t\t\t\t$(\".ui-dialog-buttonpane .alerts\").append(alert + \"</br>\");\n\t\t\t}\n\t\t},\n\t\tgetTimeOffset = function() {\n\t\t\t//Since start/end times are in UTC but user obviously isn't UTC, this offers a workaround with LocaleString\n\t\t\t/*a = new Date(); \n\t\t\tb= new Date(a.toLocaleString()).getTime() - a.getTime();\n\t\t\treturn b;*/\n\t\t\treturn (new Date()).getTimezoneOffset()*60*1000;\n\t\t},\n\t\tgetDialogValues = function(type, index) {\n\t\t\t/* \n\t\tGet start/current/end values from the add/edit dialog. \n\t\t\n\t\tReturns an object: {\"start\": start, \"current\":current, \"end\":end};\n\t\t*/\n\t\t\tvar start, current, end;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'counter':\n\t\t\t\t\tstart = parseFloat($(\"input[name='counter-start']\").attr(\"value\")),\n\t\t\t\t\tcurrent = parseFloat($(\"input[name='counter-current']\").attr(\"value\")),\n\t\t\t\t\tend = parseFloat($(\"input[name='counter-end']\").attr(\"value\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'timer':\n\t\t\t\t\tvar hours = parseInt($(\"input[name='hours']\").attr(\"value\"), 10),\n\t\t\t\t\t\tminutes = parseInt($(\"input[name='minutes']\").attr(\"value\"), 10),\n\t\t\t\t\t\tseconds = parseInt($(\"input[name='seconds']\").attr(\"value\"), 10);\n\t\t\t\t\tstart = 0,\n\t\t\t\t\tcurrent = (index === undefined) ? 0 : input.bars[index].current,\n\t\t\t\t\t//In milliseconds\n\t\t\t\t\tend = hours * 60 * 60 * 1000 + minutes * 60 * 1000 + seconds * 1000;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'clock':\n\t\t\t\t\tvar offset = getTimeOffset(),\n\t\t\t\t\t\tstartDate = $(\"input[name=start-date]\").datetimepicker('getDate'),\n\t\t\t\t\t\tendDate = $(\"input[name=end-date]\").datetimepicker('getDate'),\n\t\t\t\t\tstart = new Date(startDate).getTime(),\n\t\t\t\t\tcurrent = (new Date()).getTime(),\t\n\t\t\t\t\tend = new Date(endDate).getTime();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t\"start\": start,\n\t\t\t\t\"current\": current,\n\t\t\t\t\"end\": end\n\t\t\t};\n\t\t},\n\t\t//COMPATIBILITY FUNCTIONS\n\t\tisDateInputSupported = function() {\n\t\t\t/*\n\t\tCheck if Browser doesn't support HTML date picker. Used for falling\n\t\tback on jQuery Datepicker.\n\t\tFrom http://updates.html5rocks.com/2012/08/Quick-FAQs-on-input-type-date-in-Google-Chrome\n\t\t*/\n\t\t\tvar elem = document.createElement('input');\n\t\t\telem.setAttribute('type', 'date');\n\t\t\telem.value = 'foo';\n\t\t\treturn (elem.type == 'date' && elem.value != 'foo');\n\t\t},\n\t\t//TIMER FUNCTIONS\n\t\tstartTimer = function(selection) {\n\t\t\tindex = input.bars.indexOf(selection);\n\t\t\tif (input.bars[index].type === \"timer\" && !input.bars[index].progress.start) {\n\t\t\t\tinput.bars[index].progress.start = new Date().getTime();\n\t\t\t}\n\t\t\tsaveData();\n\n\t\t},\n\t\tresetTimer = function(selection) {\n\t\t\tindex = input.bars.indexOf(selection);\n\t\t\tif (input.bars[index].type === \"timer\") {\n\t\t\t\tinput.bars[index].current = 0;\n\t\t\t\tif (input.bars[index].progress.start) {\n\t\t\t\t\t//If timer was running at the time of reset, delete progress and start again.\n\t\t\t\t\tdelete input.bars[index].progress.start;\n\t\t\t\t\tstartTimer(selection); //Starting also includes a data save\n\t\t\t\t}\n\t\t\t\tsaveData();\n\t\t\t}\n\n\t\t},\n\t\tpauseTimer = function(selection) {\n\t\t\tindex = input.bars.indexOf(selection);\n\t\t\tif (input.bars[index].type === \"timer\" && input.bars[index].progress.start) {\n\t\t\t\tvar start = input.bars[index].progress.start,\n\t\t\t\t\tcurrent = new Date().getTime();\n\t\t\t\tdelete input.bars[index].progress.start;\n\t\t\t\t//Upon disengaging the timer, save the temporary\n\t\t\t\t//Date() timer progress into the 'current' var\n\t\t\t\tinput.bars[index].current = input.bars[index].current + (current - start);\n\n\t\t\t\tsaveData();\n\t\t\t}\n\t\t},\n\t\ttoggleTimer = function(selection) {\n\t\t\tindex = input.bars.indexOf(selection);\n\t\t\tif (input.bars[index].progress.start) {\n\t\t\t\tpauseTimer(selection);\n\t\t\t} else {\n\t\t\t\tstartTimer(selection);\n\t\t\t}\n\t\t},\n\t\t//D3 FUNCTIONS\n\t\tupdate = function(selection) {\n\t\t\tvar currentTime = (new Date()).getTime();\n\t\t\tselection.selectAll(\"h2\").text(function(d) {\n\t\t\t\treturn d.name;\n\t\t\t});\n\t\t\tselection.selectAll(\".note\").text(function(d) {\n\t\t\t\treturn d.note;\n\t\t\t});\n\t\t\t\n\t\t\tvar progress = selection.selectAll(\".progress\");\n\t\t\tprogress.transition()\n\t\t\t\t.duration(300)\n\t\t\t\t.attr(\"width\", function(d) {\n\t\t\t\tif (d.type === \"clock\") {\n\t\t\t\t\td.current = currentTime;\n\t\t\t\t}\n\t\t\t\treturn progressLocation(d, barWidth);\n\t\t\t});\n\t\t\t//Sometimes a user editing a bar changes the start or end\n\t\t\td3.selectAll(\".slip.active .start\")\n\t\t\t\t.text(function(d) {\n\t\t\t\treturn format(d.start, d.type);\n\t\t\t});\n\t\t\td3.selectAll(\".slip.active .end\")\n\t\t\t\t.text(function(d) {\n\t\t\t\treturn format(d.end, d.type);\n\t\t\t});\n\t\t\t\n\t\t\td3.selectAll(\".slip.active\")\n\t\t\t.each(function(d){ \n\t\t\t\tif (d.type !== \"counter\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar that = d3.select(this),\n\t\t\t\t\tbuttons = that.selectAll(\".change-counter\");\n\t\t\t\tif (d.curly === true && buttons[0].length > 0) {\n\t\t\t\t\tbuttons.remove();\n\t\t\t\t}/* else if (d.curly === false && buttons[0].length < 0) {\n\t\t\t\t\t//TODO: Add buttons back here\n\t\t\t\t}*/\n\t\t\t});\n\n\t\t\t//Update text for current progress\n\t\t\t//Currently, everything below happens twice, once for the text \n\t\t\t//outline and once for the foreground text\n\t\t\td3.selectAll(\".slip.active .current\")\n\t\t\t\t.classed(\"highlight\", function(d) {\n\t\t\t\t\t\tvar c = getCurrentVal(d);\n\t\t\t\t\t\tif ((d.start < d.end) && (c > d.end || c < d.start)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else if ((d.start > d.end) && (c < d.end || c > d.start)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.classed(\"inactive\", function(d) {\n\t\t\t\t\tif (d.type === \"timer\" && d.progress.start === undefined) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.text(function(d) {\n\t\t\t\t\tvar c = getCurrentVal(d);\n\t\t\t\t\treturn format(c, d.type);\n\t\t\t\t})\n\t\t\t\t.transition()\n\t\t\t\t.duration(function(d) { \n\t\t\t\t\tif (d.type === \"timer\" && d.progress.start === undefined) {\n\t\t\t\t\t\t//If a paused timer, slowly animate to nothing\n\t\t\t\t\t\treturn 1000\n\t\t\t\t\t} else if (d.type === \"timer\" && new Date().getTime() - d.progress.start < 1000) {\n\t\t\t\t\t\t//If a paused timer that was recently unpaused, ease back into the rhythm\n\t\t\t\t\t\treturn 1000\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 300\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.attr(\"x\", function(d) {\n\t\t\t\t\tvar textBoundingWidth = $(this)[0].getBBox().width,\n\t\t\t\t\t\tloc = progressLocation(d, barWidth);\n\t\t\t\t\tif (loc + slipMargin < textBoundingWidth/2) {\n\t\t\t\t\t\t//If at the very start of the bar, position text so that it \n\t\t\t\t\t\t//doesn't go beyond edges\n\t\t\t\t\t\treturn textBoundingWidth/2 + + slipMargin;\n\t\t\t\t\t} else if (loc + slipMargin > slipWidth-textBoundingWidth/2) {\n\t\t\t\t\t\t//Same correction for the end of the bar\n\t\t\t\t\t\treturn slipWidth - textBoundingWidth/2 - slipMargin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn loc + slipMargin;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\n\t\t\t$(\"#container\").sortable({\n\t\t\t\tplaceholder: \"ui-sortable-placeholder\",\n\t\t\t\taxis: \"y\",\n\t\t\t\tcontainment: \"parent\",\n\t\t\t\titems: \".slip.active\",\n\t\t\t\tcancel: \"h2, span\",\n\t\t\t\tstart: function(event, ui) {\n\t\t\t\t\tstart = ui.item.prevAll(\".slip.active\").length;\n\t\t\t\t},\n\t\t\t\tupdate: function(e, ui) {\n\t\t\t\t\tend = ui.item.prevAll(\".slip.active\").length;\n\t\t\t\t\tbar = input.bars.splice(start, 1);\n\t\t\t\t\tinput.bars.splice(end, 0, bar[0]);\n\t\t\t\t\tsaveData();\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tenter = function(selection) {\n\t\t\t//START DEBUG\n\t\t\tselection.append(\"button\").attr(\"class\", \"delete-button\")\n\t\t\t\t.text(\"X\").style(\"float\", \"right\")\n\t\t\t\t.on(\"click\", slipDelete);\n\n\t\t\t$(\".delete-button\").text(\"\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\tprimary: \"ui-icon-closethick\"\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tselection.append(\"button\").attr(\"class\", \"edit-button\")\n\t\t\t\t.text(\"Edit\").style(\"float\", \"right\")\n\t\t\t\t.on(\"click\", slipEdit);\n\n\t\t\t$(\".edit-button\").text(\"\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\tprimary: \"ui-icon-pencil\"\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$(\"button\").button();\n\n\t\t\taddCounterButtons(selection);\n\t\t\t\n\t\t\tselection.filter(function(d, i) {\n\t\t\t\treturn d.type == \"timer\";\n\t\t\t})\n\t\t\t\t.append(\"button\")\n\t\t\t\t.attr(\"class\", \"timer-toggle\")\n\t\t\t\t.text(\"Start/Pause\")\n\t\t\t\t.style(\"float\", \"right\")\n\t\t\t\t.on(\"click\", toggleTimer);\n\n\t\t\tselection.filter(function(d, i) {\n\t\t\t\treturn d.type == \"timer\";\n\t\t\t})\n\t\t\t\t.append(\"button\")\n\t\t\t\t.attr(\"class\", \"timer-reset\")\n\t\t\t\t.text(\"Reset\")\n\t\t\t\t.style(\"float\", \"right\")\n\t\t\t\t.on(\"click\", resetTimer);\n\t\t\t//           .call(toggleTimer);\n\t\t\t// END DEBUG\n\n\t\t\tselection.append(\"h2\");\n\t\t\tselection.append(\"p\").append(\"span\").attr(\"class\", \"note\");\n\t\t\tvar bar = selection.append(\"svg\")\n\t\t\t\t.attr(\"width\", slipWidth)\n\t\t\t\t.attr(\"height\", 45)\n\t\t\t\t.attr(\"class\", \"bar\")\n\t\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", \"translate(\" + 0 + \",\" + 10 + \")\");\n\n\t\t\tbar.append(\"rect\")\n\t\t\t\t.attr(\"class\", \"bar-outline\")\n\t\t\t\t.attr(\"width\", barWidth)\n\t\t\t\t.attr(\"height\", 20)\n\t\t\t\t.attr(\"x\", slipMargin);\n\n\t\t\tvar progress = bar.append(\"rect\")\n\t\t\t\t.attr(\"class\", \"progress\")\n\t\t\t//.attr(\"width\", function(d){return progressLocation(d, barWidth)})\n\t\t\t.attr(\"height\", 20)\n\t\t\t\t.attr(\"x\", slipMargin);\n\t\t\t\t\n\t\t\t//Start text\n\t\t\tbar.append(\"text\")\n\t\t\t\t.attr(\"class\", \"start\")\n\t\t\t\t.text(function(d) {\n\t\t\t\treturn format(d.start, d.type);\n\t\t\t})\n\t\t\t\t.attr(\"x\", slipMargin)\n\t\t\t\t.attr(\"y\", 31);\n\t\t\t//progress text\n\t\t\t\n\t\t\t//progress text - background\n\t\t\tbar.append(\"text\")\n\t\t\t\t.attr(\"class\", \"current current-background\")\n\t\t\t.attr(\"y\", 15);\n\t\t\t\n\t\t\tbar.append(\"text\")\n\t\t\t\t.attr(\"class\", \"current\")\n\t\t\t.attr(\"y\", 15);\n\t\t\t\n\t\t\t//End text\n\t\t\tbar.append(\"text\")\n\t\t\t\t.attr(\"class\", \"end\")\n\t\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t\t.text(function(d) {\n\t\t\t\treturn format(d.end, d.type);\n\t\t\t})\n\t\t\t\t.attr(\"x\", barWidth + slipMargin)\n\t\t\t\t.attr(\"y\", 31);\n\t\t},\n\t\taddCounterButtons = function(selection) {\n\t\t\tvar counters = selection.filter(function(d, i) {\n\t\t\t\treturn d.type === \"counter\" && d.curly !== true;\n\t\t\t});\n\n\t\t\tvar d = 100,\n\t\t\t\tcounterValues;\n\t\t\tif (d < 40) counterValues = [1, 5, 10];\n\t\t\tif (d < 80) counterValues = [1, 5, 10];\n\t\t\telse if (d < 120) counterValues = [1, 5, 50];\n\t\t\telse if (d < 500) counterValues = [1, 10, 100];\n\t\t\telse counterValues = [1, 10, 100];\n\n\t\t\tcounterValues = counterValues\n\t\t\t\t//Add the 0 value that stands in for the quick edit button (TODO)\n\t\t\t\t.concat([0])\n\t\t\t\t//Add negative versions to counter values\n\t\t\t\t.concat(counterValues.map(function(v) {\n\t\t\t\t\treturn -v;\n\t\t\t\t}))\n\t\t\t\t//Sort descending (since buttons are places right to left\n\t\t\t\t.sort(function(a, b) {\n\t\t\t\t\treturn b - a;\n\t\t\t\t});\n\n\t\t\tfor (var i = 0; i < counterValues.length; i++) {\n\t\t\t\tvar v = counterValues[i];\n\t\t\t\tif (v !== 0) {\n\t\t\t\t\tcounters.append(\"button\")\n\t\t\t\t\t\t.attr(\"class\", \"change-counter\")\n\t\t\t\t\t\t.text((v >= 0 ? \"+\" : \"\") + v)\n\t\t\t\t\t\t.style(\"float\", \"right\")\n\t\t\t\t\t\t.on(\"click\", (function(val) {\n\t\t\t\t\t\treturn function(d) {\n\t\t\t\t\t\t\tchangeCounter(d, val);\n\t\t\t\t\t\t};\n\t\t\t\t\t})(v) ///Yay private closures!\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// TODO: Make quick edit button\n\t\t\t\t\t//counters.append(\"button\").html(\"Quick<br/>Edit\").style(\"float\", \"right\")\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tslipAdd = function(key, type, name, note, start, end, current) {\n\t\t\tif (!current) {\n\t\t\t\tcurrent = start;\n\t\t\t}\n\t\t\tvar newBar = {\n\t\t\t\t\"key\": key,\n\t\t\t\t\"type\": type,\n\t\t\t\t\"name\": name,\n\t\t\t\t\"note\": note,\n\t\t\t\t\"start\": start,\n\t\t\t\t\"end\": end,\n\t\t\t\t\"current\": current\n\t\t\t\t//\"direction\" : ((start>=end) ? \"normal\" : \"reverse\")\n\t\t\t};\n\n\t\t\tif (type === \"timer\") {\n\t\t\t\tnewBar.progress = {\n\t\t\t\t\t\"start\": new Date().getTime(),\n\t\t\t\t\t\"current\": null\n\t\t\t\t};\n\t\t\t}\n\t\t\tinput.bars.push(newBar);\n\t\t\tsaveData();\n\t\t\tprogress.draw();\n\t\t},\n\t\tslipDelete = function(selection) {\n\t\t\tindex = input.bars.indexOf(selection);\n\t\t\tinput.bars.splice(index, 1);\n\t\t\tsaveData();\n\t\t\tprogress.draw();\n\t\t},\n\t\tslipEdit = function(selection) {\n\t\t\tindex = input.bars.indexOf(selection);\n\t\t\tdraw.editDialog(index);\n\t\t\tsaveData();\n\t\t\tprogress.draw();\n\t\t},\n\t\t//DATA FUNCTIONS\n\t\tchangeCounter = function(data, change) {\n\t\t\tindex = input.bars.indexOf(data);\n\t\t\tinput.bars[index].current = parseInt(input.bars[index].current, 10) + parseInt(change, 10);\n\t\t\tsaveData();\n\t\t\tprogress.draw();\n\t\t},\n\t\tsaveData = function(forceSync) {\n\t\t\tif (opts.chrome === false) {\n\t\t\t\tsaveLocalData();\n\t\t\t} else if (opts.chrome === true) {\n\t\t\t\tsaveChromeData(forceSync);\n\t\t\t}\n\t\t},\n\t\tsaveLocalData = function() {\n\t\t\t/* \n\t\t\tSave data to local storage as a JSON string\n\t\t\t*/\n\t\t\t//Stringify JSON\n\t\t\tvar str = JSON.stringify(input);\n\t\t\tlocalStorage.setItem('progressData', str);\n\t\t\treturn;\n\t\t},\n\t\tsaveChromeData = function(forceSync) {\n\t\t/* Save data to chrome.storage */\n\t\t\tinput.lastSave = new Date().getTime();\n\t\t\tif (typeof(forceSync) === \"undefined\") forceSync = false;\n\t\t\tif ( forceSync === true || typeof(input.lastSync) === \"undefined\" || (input.lastSave-input.lastSync) > (5*60*1000) ) {\n\t\t\t\t\tlog(\"Syncing! Forced: \" + forceSync);\n\t\t\t\t\tinput.lastSync = input.lastSave;\n\t\t\t\t\tchrome.storage.sync.set(input, function() {\n\t\t\t\t\t\t//Okay fine, the \"syncing\" notification shows up after syncing ;)\n\t\t\t\t\t\t$(\".footer.syncWindow\").slideDown(300).slideDown(300).delay(500).slideUp(130);\n\t\t\t\t\t});\n\t\t\t\t\tif (typeof(input.syncTimeout) !== \"undefined\") {\n\t\t\t\t\t\twindow.clearTimeout(input.syncTimeout);\n\t\t\t\t\t\tdelete input.syncTimeout;\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//Save locally if sync has happened in the last five minutes\n\t\t\t\tlog(\"Saving locally\");\n\t\t\t\tchrome.storage.local.set(input);\n\t\t\t\t//Sync in 5 minutes if left untouched\n\t\t\t\tif (typeof(input.syncTimeout) === \"undefined\") {\n\t\t\t\t\tinput.syncTimeout = window.setTimeout(function(){saveChromeData(true);}, 5*60*1000);\t\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tloadNewData = function(json) {\n\t\t\t/* \n\t\tLoad new JSON object to input var\n\t\t\n\t\tTODO:\n\t\t- checks to make sure the data is well-formed\n\t\t*/\n\t\t\tinput = json;\n\t\t\tsaveData();\n\t\t\tprogress.draw();\n\t\t\treturn;\n\t\t},\n\t\tloadData = function(callback) {\n\t\t\tif (opts.chrome === false) {\n\t\t\t\tloadLocalData(callback);\n\t\t\t} else if (opts.chrome === true) {\n\t\t\t\tloadChromeData(callback);\n\t\t\t}\n\t\t},\n\t\tcheckStorageSpace = function() {\n\t\t\tif (opts.chrome === false) {\n\t\t\t\t/*Ignoring localStorage for now, as the 5mb default certainly \n\t\t\t\twouldn't be hit by an unsuspecting user, and the app would\n\t\t\t\tcrash well before that happened anyway.\n\t\t\t\t*/\n\t\t\t} else if (opts.chrome === true) {\n\t\t\t\tchrome.storage.local.getBytesInUse(function(e){ \n\t\t\t\t\tif (e > (0.75*102400)) {\n\t\t\t\t\t\talert(\"You're approaching the storage limit for this app. Curently, you have \"+Math.ceil(100*e/102400)+\"% of the allowable storage used. Try deleting some bars for extra space\"); \n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tloadLocalData = function(callback) {\n\t\t\t/* \n\t\tLoad local storage JSON string and parse to object \n\t\t*/\n\t\t\tvar str = localStorage.getItem('progressData');\n\t\t\tif (str === null || str === \"\") {\n\t\t\t\t//Use default data (see input variable above)\n\t\t\t\tprogress.draw();\n\n\t\t\t} else {\n\t\t\t\tinput = JSON.parse(str);\n\t\t\t\tparseDataTypes();\n\t\t\t\tprogress.draw();\n\t\t\t}\n\t\t\tif (typeof(callback) === \"function\") {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t\treturn;\n\t\t},\n\t\tloadChromeData = function(callback) {\n\t\t\t/* \n\t\t\tLoad Chrome sync data\n\t\t\t*/\n\t\t\tchrome.storage.sync.get(null, function(syncData) {\n\t\t\t\tvar syncEmpty = $.isEmptyObject(syncData);\n\t\t\t\t//Doublecheck there there isn't any newer data stored locally\n\t\t\t\tchrome.storage.local.get(null, function(localData){\n\t\t\t\t\tvar localEmpty = $.isEmptyObject(localData);\n\t\t\t\t\tif (syncEmpty && localEmpty) {\n\t\t\t\t\t\tlog(\"Both sync and local are empty. Trying localStorage.\");\n\t\t\t\t\t\tloadLocalData(callback);\n\t\t\t\t\t} else { \n\t\t\t\t\t\tif (syncEmpty) {\n\t\t\t\t\t\t\tinput = localData;\n\t\t\t\t\t\t} else if (localEmpty) {\n\t\t\t\t\t\t\tinput = syncData;\n\t\t\t\t\t\t} else if (localData.lastSave > syncData.lastSave) {\n\t\t\t\t\t\t\tinput = localData;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinput = syncData;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(callback) === \"function\") {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t});\t\n\t\t\treturn;\n\t\t},\n\t\tparseDataTypes = function() {\n\t\t\tfor (var i=0;i<input.bars.length;i++) {\n\t\t\t\tinput.bars[i].start = parseFloat(input.bars[i].start);\n\t\t\t\tinput.bars[i].current = parseFloat(input.bars[i].current);\n\t\t\t\tinput.bars[i].end = parseFloat(input.bars[i].end);\n\t\t\t}\n\t\t\tinput.settings = input.settings ? input.settings : {};\n\t\t\tinput.settings.lastTip = input.settings.lastTip ? parseInt(input.settings.lastTip) : -1;\n\t\t\tinput.settings.tipShow = (typeof(input.settings.tipShow) !==\"undefined\") ? input.settings.tipShow : true;\n\t\t},\n\t\tdeleteData = function() {\n\t\t\tif (opts.chrome === false) {\n\t\t\t\tdeleteLocalData();\n\t\t\t} else if (opts.chrome === true) {\n\t\t\t\tdeleteChromeData();\n\t\t\t}\n\t\t\tlocation.reload();\n\t\t},\n\t\tdeleteLocalData = function() {\n\t\t\t/* \n\t\tRemove Local storage data\n\t\t*/\n\t\t\tlocalStorage.removeItem('progressData');\n\t\t},\n\t\tdeleteChromeData = function() {\n\t\t\t/* \n\t\t\tLoad Chrome sync data\n\t\t\t*/\n\t\t\tchrome.storage.local.clear();\n\t\t\tchrome.storage.sync.clear();\n\t\t\treturn;\n\t\t},\n\t\t//MENU DRAWING\n\t\tdraw = (function() {\n\t\t\t/* \n\t\t\tFunctions for drawing certain elements\n\t\t*/\n\t\t\tvar checkMinMax = function() {\n\t\t\t\tvar min = parseInt($(this).attr(\"min\"), 10);\n\t\t\t\tvar value = parseInt($(this).attr(\"value\"), 10);\n\t\t\t\tvar max = parseInt($(this).attr(\"max\"), 10);\n\n\t\t\t\tif (value < min) {\n\t\t\t\t\t$(this).attr(\"value\", min);\n\t\t\t\t} else if (value > max) {\n\t\t\t\t\t$(this).attr(\"value\", max);\n\t\t\t\t}\n\t\t\t},\n\t\t\tboundCurrent = function(start, current, end) {\n\t\t\t\t/*\n\t\t\t\tMake the 'current' slider bound between the start and end\n\t\t\t\tvalue, with provisions to account for either count-up or count-down\n\t\t\t\t*/\n\t\t\t\tvar startVal = parseInt(start.attr(\"value\"), 10),\n\t\t\t\t\tendVal = parseInt(end.attr(\"value\"), 10),\n\t\t\t\t\tcurrentVal = parseInt(current.attr(\"value\"), 10);\n\t\t\t\tif (startVal < endVal && currentVal < startVal) {\n\t\t\t\t\t/** Lower than min on count-up */\n\t\t\t\t\tcurrent.attr(\"value\", startVal);\n\t\t\t\t} else if (startVal < endVal && currentVal > endVal) {\n\t\t\t\t\t/** Higher than max on count-up */\n\t\t\t\t\tcurrent.attr(\"value\", endVal);\n\t\t\t\t} else if (startVal > endVal && currentVal > startVal) {\n\t\t\t\t\t/** Higher than max on count-down */\n\t\t\t\t\tcurrent.attr(\"value\", startVal);\n\t\t\t\t} else if (startVal > endVal && currentVal < endVal) {\n\t\t\t\t\t/** Lower than min on count-down */\n\t\t\t\t\tcurrent.attr(\"value\", endVal);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tdescriptionBoxes: function(parentDiv, data) {\n\t\t\t\t\t$(\"<div class='progress-description'>\")\n\t\t\t\t\t\t.html(\"<strong>Title</strong><br/>\" + \"<input type='text' name='title-input'>\" + \"<br/><strong>Description</strong>\" + \"<textarea name='description-input'>\")\n\t\t\t\t\t\t.appendTo(parentDiv);\n\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\t$(\"input[name='title-input']\").attr(\"value\", data.name);\n\t\t\t\t\t\t$(\"textarea[name='description-input']\").attr(\"value\", data.note);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclockControls: function(parentDiv, data) {\n\t\t\t\t\tvar offset = getTimeOffset(),\n\t\t\t\t\t\tstart = new Date( new Date().getTime() ),\n\t\t\t\t\t\tend = new Date(start);\n\t\t\t\t\t\tend.setMinutes(start.getMinutes() + 60);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\tstart = new Date(data.start);\n\t\t\t\t\t\tend = new Date(data.end);\n\t\t\t\t\t}\n\t\t\t\t\tparentDiv.empty();\n\t\t\t\t\t$(\"<div class='choose-timer'>\")\n\t\t\t\t\t\t.html(\"<h3>Choose start time</h3>\" + \"<input type='text' name='start-date'>\")\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t//Choose end time\n\t\t\t\t\t$(\"<div class='choose-timer'>\")\n\t\t\t\t\t\t.html(\"<h3>Choose end time</h3>\" + \"<input type='text' name='end-date'>\")\n\t\t\t\t\t\t.appendTo(parentDiv);\n\n\t\t\t\t\t$('input[name=\"start-date\"]')\n\t\t\t\t\t\t.datetimepicker({\n\t\t\t\t\t\t\thourGrid: 6,\n\t\t\t\t\t\t\tminuteGrid: 15,\n\t\t\t\t\t\t\tbeforeShow: function(input, inst) {\n\t\t\t\t\t\t\t\t\tinst.dpDiv.css({marginTop: -100-input.offsetHeight + 'px', marginLeft: 20+input.offsetWidth + 'px'});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.datetimepicker(\"setDate\", start);\n\t\t\t\t\t$(\"input[name='end-date']\")\n\t\t\t\t\t\t.datetimepicker({\n\t\t\t\t\t\t\t//altField: \"input[name='end-time']\",\n\t\t\t\t\t\t\thourGrid: 6,\n\t\t\t\t\t\t\tminuteGrid: 15,\n\t\t\t\t\t\t\tbeforeShow: function(input, inst) {\n\t\t\t\t\t\t\t\tinst.dpDiv.css({marginTop: -160-input.offsetHeight + 'px', marginLeft: 20+input.offsetWidth + 'px'});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.datepicker(\"setDate\", end);\n\t\t\t\t\t$(\"input[name='start-date'], input[name='end-date']\").change(function() {\n\t\t\t\t\t\tcheckDataQuality(\"clock\");\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\ttimerControls: function(parentDiv, data, index) {\n\t\t\t\t\tparentDiv.empty();\n\t\t\t\t\tvar detailDiv = $(\"<em>A timer lets you count down for a given amount of time. Like an egg timer!</em><br/>\").appendTo(parentDiv);\n\n\t\t\t\t\tvar startDiv = $(\"<div style='position:absolute;width:125px;'>\")\n\t\t\t\t\t\t.css(\"left\", 0)\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t$(\"<h3>Hours</h3>\").appendTo(startDiv);\n\t\t\t\t\t$(\"<input type='number' name='hours' min='0'>\")\n\t\t\t\t\t\t.css(\"width\", \"4em\")\n\t\t\t\t\t\t.attr(\"value\", \"0\")\n\t\t\t\t\t\t.appendTo(startDiv)\n\t\t\t\t\t\t.change(function() {\n\t\t\t\t\t\t\tcheckDataQuality(\"timer\");\n\t\t\t\t\t\t});\n\n\t\t\t\t\tvar currentDiv = $(\"<div style='position:absolute;width:125px;'>\")\n\t\t\t\t\t\t.css(\"left\", 125)\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t$(\"<h3>Minutes</h3>\").appendTo(currentDiv);\n\t\t\t\t\t$(\"<input type='number' name='minutes' min='0' max='59'>\")\n\t\t\t\t\t\t.css(\"width\", \"3em\")\n\t\t\t\t\t\t.attr(\"value\", \"1\")\n\t\t\t\t\t\t.appendTo(currentDiv)\n\t\t\t\t\t\t.change(function() {\n\t\t\t\t\t\t\tcheckDataQuality(\"timer\");\n\t\t\t\t\t\t});\n\n\t\t\t\t\tvar endDiv = $(\"<div style='position:absolute;width:125px;'>\")\n\t\t\t\t\t\t.css(\"left\", 250)\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t$(\"<h3>Seconds</h3>\").appendTo(endDiv);\n\t\t\t\t\t$(\"<input type='number' name='seconds' min='0' max='59'>\")\n\t\t\t\t\t\t.css(\"width\", \"3em\")\n\t\t\t\t\t\t.attr(\"value\", \"0\")\n\t\t\t\t\t\t.appendTo(endDiv)\n\t\t\t\t\t\t.change(function() {\n\t\t\t\t\t\t\tcheckDataQuality(\"timer\");\n\t\t\t\t\t\t});\n\n\t\t\t\t\t//$(\"input[type=number]\").spinner();\n\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\tvar end = msToFullTime(new Date(data.end), true),\n\t\t\t\t\t\t\tcurrent;\n\t\t\t\t\t\tif (data.progress.start) {\n\t\t\t\t\t\t\tcurrent = data.current + (new Date().getTime() - data.progress.start);\n\t\t\t\t\t\t\t//Pause and restart timer, to save updated progress\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrent = data.current;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$(\"input[name='hours']\").attr(\"value\", end.hours);\n\t\t\t\t\t\t$(\"input[name='minutes']\").attr(\"value\", end.minutes);\n\t\t\t\t\t\t$(\"input[name='seconds']\").attr(\"value\", end.seconds);\n\n\t\t\t\t\t\tvar progressNote = $(\"<p style='position:absolute;top:130px;'>Your current timer progress is \" + format(current, \"timer\") + \".</p>\")\n\t\t\t\t\t\t\t.append(\n\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.appendTo(detailDiv);\n\n\t\t\t\t\t\t$(\"<button>Reset progress?</button>\").click(function() {\n\t\t\t\t\t\t\tresetTimer(data);\n\t\t\t\t\t\t\tpauseTimer(data);\n\t\t\t\t\t\t\tprogressNote.html(\"Timer is reset. Currently paused.\");\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.appendTo(progressNote);\n\t\t\t\t\t}\n\t\t\t\t\t$(parentDiv).find(\"input\").change(function() {\n\t\t\t\t\t\tcheckDataQuality(\"timer\", index);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tcounterControls: function(parentDiv, data) {\n\t\t\t\t\t/* \n\t\t\t\tClears parent object and adds new controls for using the counter type.\n\t\t\t\t*/\n\t\t\t\t\tparentDiv.empty();\n\t\t\t\t\t$(\"<em>A counter lets you track progress between two numbers. You have to manually set the current place.</em><br/>\").appendTo(parentDiv);\n\n\t\t\t\t\tvar startDiv = $(\"<div style='position:absolute;width:150px;'>\")\n\t\t\t\t\t\t.css(\"left\", 0)\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t$(\"<h3>Start Value</h3>\").appendTo(startDiv);\n\t\t\t\t\t$(\"<input type='number' name='counter-start' min='0'>\")\n\t\t\t\t\t\t.css(\"width\", \"4em\")\n\t\t\t\t\t\t.attr(\"value\", \"0\")\n\t\t\t\t\t\t.change(function() {\n\t\t\t\t\t\tcheckDataQuality(\"counter\");\n\t\t\t\t\t})\n\t\t\t\t\t\t.appendTo(startDiv);\n\t\t\t\t\tvar currentDiv = $(\"<div style='position:absolute;width:125px;'>\")\n\t\t\t\t\t\t.css(\"left\", 125)\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t$(\"<h3>Current Value</h3>\").appendTo(currentDiv);\n\t\t\t\t\t$(\"<input type='number' name='counter-current' min='0'>\")\n\t\t\t\t\t\t.css(\"width\", \"4em\")\n\t\t\t\t\t\t.attr(\"value\", \"0\")\n\t\t\t\t\t\t.appendTo(currentDiv)\n\t\t\t\t\t\t.change(function() {\n\t\t\t\t\t\tcheckDataQuality(\"counter\");\n\t\t\t\t\t});\n\n\t\t\t\t\tvar endDiv = $(\"<div style='position:absolute;width:125px;'>\")\n\t\t\t\t\t\t.css(\"left\", 250)\n\t\t\t\t\t\t.appendTo(parentDiv);\n\t\t\t\t\t$(\"<h3>End Value</h3>\").appendTo(endDiv);\n\t\t\t\t\t$(\"<input type='number' name='counter-end' min='0'>\")\n\t\t\t\t\t\t.css(\"width\", \"4em\")\n\t\t\t\t\t\t.attr(\"value\", \"100\")\n\t\t\t\t\t\t.appendTo(endDiv)\n\t\t\t\t\t\t.change(function() {\n\t\t\t\t\t\tcheckDataQuality(\"counter\");\n\t\t\t\t\t});\n\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\t$(\"input[name=counter-start]\").attr(\"value\", data.start);\n\t\t\t\t\t\t$(\"input[name=counter-current]\").attr(\"value\", data.current);\n\t\t\t\t\t\t$(\"input[name=counter-end]\").attr(\"value\", data.end);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\teditDialog: function(index) {\n\t\t\t\t\t/*\n\t\t\t\t\tLoad dialog for adding or editing progress bars.\n\t\t\t\t\t@arg index: (optional) The index of the progress bar in \n\t\t\t\t\t\tthe app data. If empty, creates a new bar dialog.\n\t\t\t\t*/\n\t\t\t\t\tvar oldData;\n\t\t\t\t\tif (index !== undefined) {\n\t\t\t\t\t\toldData = input.bars[index];\n\t\t\t\t\t}\n\t\t\t\t\tvar dialog = $(\"<div class='dialog'>\").appendTo(\"#container\");\n\n\t\t\t\t\t//Add Title and Optional description inputs\n\t\t\t\t\tvar detailsDiv = $(\"<div id='details-div'>\").appendTo(dialog);\n\t\t\t\t\tdraw.descriptionBoxes(detailsDiv, oldData);\n\t\t\t\t\t//Block for contextual controls\n\t\t\t\t\tvar contextDiv = $(\"<div id='context-div'>\").prependTo(dialog);\n\t\t\t\t\t//Draw contextual controls and track for changes in bar type\n\t\t\t\t\tfunction drawControls(type) {\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase 'counter':\n\t\t\t\t\t\t\t\tdraw.counterControls(contextDiv, oldData, index);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'timer':\n\t\t\t\t\t\t\t\tdraw.timerControls(contextDiv, oldData, index);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'clock':\n\t\t\t\t\t\t\t\tdraw.clockControls(contextDiv, oldData, index);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (index !== undefined) {\n\t\t\t\t\t\t/* If editing an existing bar. */\n\t\t\t\t\t\t$(\".dialog\").attr(\"title\", \"Edit an existing progress bar.\");\n\t\t\t\t\t\ttype = input.bars[index].type;\n\t\t\t\t\t\t$(\"input[name='title-input']\").attr(\"value\", input.bars[index].title);\n\t\t\t\t\t\t$(\"textarea[name='description-input']\").attr(\"value\", input.bars[index].description);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* If adding a new bar */\n\t\t\t\t\t\t$(\".dialog\").attr(\"title\", \"Add a new progress bar.\");\n\t\t\t\t\t\t//Choose bar type\n\t\t\t\t\t\t$(\"<h3>Choose progress bar type</h3>\").appendTo(detailsDiv);\n\t\t\t\t\t\t$(\"<div id='choose-type'>\")\n\t\t\t\t\t\t\t.html(\"<input type='radio' name='bar-type' value='Counter' checked>Counter\" + \"<input type='radio' name='bar-type' value='Timer'>Timer\" + \"<input type='radio' name='bar-type' value='Clock'>Clock\")\n\t\t\t\t\t\t\t.appendTo(detailsDiv);\n\t\t\t\t\t\ttype = $(\".dialog input[name=bar-type]:checked\").attr(\"value\").toLowerCase();\n\t\t\t\t\t\t$(\".dialog input[name=bar-type]\").change(function() {\n\t\t\t\t\t\t\ttype = $(this).attr(\"value\").toLowerCase();\n\t\t\t\t\t\t\tdrawControls(type);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tdrawControls(type);\n\n\t\t\t\t\t$(dialog).dialog({\n\t\t\t\t\t\tautoOpen: true,\n\t\t\t\t\t\twidth: 800,\n\t\t\t\t\t\tmodal: true,\n\t\t\t\t\t\theight: 425,\n\t\t\t\t\t\tresizable: false,\n\t\t\t\t\t\tbuttons: {\n\t\t\t\t\t\t\t\"OK\": function() {\n\t\t\t\t\t\t\t\tvar key = generateKey(),\n\t\t\t\t\t\t\t\t\tcurly = false;\n\n\t\t\t\t\t\t\t\t//Get Start and end values\n\t\t\t\t\t\t\t\tvar values = getDialogValues(type, index),\n\t\t\t\t\t\t\t\t\ttitle = $(\"input[name='title-input']\").attr(\"value\"),\n\t\t\t\t\t\t\t\t\tdescription = $(\"textarea[name='description-input']\").val();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (type === 'counter') {\n\t\t\t\t\t\t\t\t\tnewCurrent = parseDescription(description);\n\t\t\t\t\t\t\t\t\tif (newCurrent !== null) {\n\t\t\t\t\t\t\t\t\t\tvalues.current = newCurrent;\n\t\t\t\t\t\t\t\t\t\tcurly = true;\n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (index !== undefined) {\n\t\t\t\t\t\t\t\t\t$.extend(input.bars[index], {\n\t\t\t\t\t\t\t\t\t\t\"name\": title,\n\t\t\t\t\t\t\t\t\t\t\"note\": description,\n\t\t\t\t\t\t\t\t\t\t\"start\": parseFloat(values.start),\n\t\t\t\t\t\t\t\t\t\t\"current\": parseFloat(values.current),\n\t\t\t\t\t\t\t\t\t\t\"end\": parseFloat(values.end),\n\t\t\t\t\t\t\t\t\t\t\"curly\":curly\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tslipAdd(key, type, title, description,\n\t\t\t\t\t\t\t\t\tparseFloat(values.start), parseFloat(values.end), parseFloat(values.current));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdialog.remove();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Cancel\": function() {\n\t\t\t\t\t\t\t\tdialog.remove();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\t\tsetNewTip = function() {\n\t\t\tvar nextTip = input.settings.lastTip+1<tips.length ? input.settings.lastTip+1:0,\n\t\t\t\ttip = tips[nextTip],\n\t\t\t\tfields = [\"preamble\",\"tip\",\"image\",\"example\"];\n\t\t\t\n\t\t\tfor (var i=0; i<fields.length;i++) {\n\t\t\t\tfield = fields[i];\n\t\t\t\tif (tip[field] && tip[field] !== \"\") {\n\t\t\t\t\tvar val = tip[field];\n\t\t\t\t\tif (field ===\"image\") {\n\t\t\t\t\t\tval = \"<img src='\"+val+\"' />\";\n\t\t\t\t\t}\n\t\t\t\t\t$(this).children(\".\"+field)\n\t\t\t\t\t\t.html(val).show();\n\t\t\t\t} else {\n\t\t\t\t\t$(this).children(\".\"+field).hide();\n\t\t\t\t}\n\t\t\t}\n\t\t\tinput.settings.lastTip = nextTip;\n\t\t},\n\t\tprepareDialogs =function() { \n\t\t\t//Defaults for all\n\t\t\t$(\".dialog\")\n\t\t\t\t.dialog({autoOpen: false, modal: true, resizable: false});\n\t\t\t\n\t\t\t$(\".footer.syncWindow\").hide();\n\t\t\tif (opts.chrome === true) {\n\t\t\t\t//Syncing Status Bar\n\t\t\t\t$(\".footer.sync\")\n\t\t\t\t\t.click(function() {\n\t\t\t\t\t\tsaveChromeData(true);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t$(\".footer.sync\").hide();\n\t\t\t}\n\t\t\t\n\t\t\t//Setting Dialog\n\t\t\t$(\".tip-toggle\")\n\t\t\t\t.change(function() {\n\t\t\t\t\tvar status = $(this).is(':checked');\n\t\t\t\t\tinput.settings.tipShow = status;\n\t\t\t\t\t$(\".tip-toggle\").attr('checked', input.settings.tipShow);\n\t\t\t\t\tsaveData();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t//Export Data Dialog\n\t\t\t$(\".export.dialog\").dialog({\n\t\t\t\twidth: 800,\n\t\t\t\topen: function( event, ui ) {\n\t\t\t\t\tvar str = JSON.stringify(input);\n\t\t\t\t\t$(\".export.dialog textarea\").text(str);\n\t\t\t\t},\n\t\t\t\tbuttons: {\n\t\t\t\t\t\"Close\": function() {\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t//Import Data Dialog\n\t\t\t$(\"#import-dialog\").dialog({\n\t\t\t\twidth: 800,\n\t\t\t\tbuttons: {\n\t\t\t\t\t\"Import\": function() {\n\t\t\t\t\t\t//Parse text, if there's an error than hopefully it will happen before sending to progress.load\n\t\t\t\t\t\tvar input = JSON.parse($('#input-box').attr(\"value\"));\n\t\t\t\t\t\tprogress.load(input);\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t\tdocument.location.reload();\n\t\t\t\t\t},\n\t\t\t\t\t\"Cancel\": function() {\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\t\t\n\t\t\t//Data reset dialog\n\t\t\t$(\".delete.dialog\").dialog({\n\t\t\t\tbuttons: {\n\t\t\t\t\t\"Delete all data\": function() {\n\t\t\t\t\t\tdeleteData();\n\t\t\t\t\t\tprogress.load();\n\t\t\t\t\t\tprogress.draw();\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t},\n\t\t\t\t\tCancel: function() {\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t//Tips Dialog\n\t\t\t$(\".tips.dialog\").dialog({\n\t\t\t\twidth: 700,\n\t\t\t\topen: setNewTip, //End Open\n\t\t\t\tbuttons: {\n\t\t\t\t\t\"New tip\": setNewTip\n\t\t\t\t} //End buttons\n\t\t\t});\n\t\t\t//debug dialog\n\t\t\t$(\".debug.dialog\").dialog({\n\t\t\t\tmodal: false, \n\t\t\t\tresizable: true\n\t\t\t});\n\t\t\t\n\t\t\t//Introduction dialog\n\t\t\t$(\".introduction.dialog\").dialog({\n\t\t\t\tmodal: false, \n\t\t\t\twidth: 500,\n\t\t\t\tbuttons: {\n\t\t\t\t\t\"Add a Bar\" : function() {\n\t\t\t\t\t\tdraw.editDialog();\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tpostLoad = function() {\n\t\t\t//Set correct settings\n\t\t\t$(\".tip-toggle\")\n\t\t\t\t.attr('checked', input.settings.tipShow)\n\t\t\t\t\n\t\t\t//Set-up Sample Bar\n\t\t\tvar example = d3.selectAll(\".slip.disabled\");\n\t\t\texample.select(\".bar-outline\").attr(\"width\", barWidth);\n\t\t\texample.select(\".progress\").attr(\"width\", barWidth*0.75);\n\t\t\t\n\t\t\tvar sample = sample_items[Math.floor(Math.random()*sample_items.length)];\n\t\t\texample.select(\"h2\").text(sample.title);\n\t\t\texample.select(\".note\").text(sample.description);\n\t\t\texample.select(\".start\").text(sample.start);\n\t\t\texample.select(\".current\").text(sample.current);\n\t\t\texample.select(\".end\").text(sample.end);\n\t\t\t\n\t\t\t//If data is empty, draw the add dialog\n\t\t\tif (input.bars.length === 0) {\n\t\t\t\t//Show introduction window\n\t\t\t\t$(\".introduction.dialog\").dialog(\"open\");\n\t\t\t\treturn false;\n\t\t\t} else if (input.settings.tipShow) {\n\t\t\t\t$(\".tips.dialog\").dialog(\"open\");\n\t\t\t};\n\t\t\t\n\t\t\t\n\t\t\tcheckStorageSpace();\n\t\t\tif (opts.chrome === false) {\n\t\t\t\taddEvent(window, \"storage\", function (event) {\n\t\t\t\t  if (event.key == 'progressData') {\n\t\t\t\t\t//TODO: Update data without first resetting bars.\n\t\t\t\t\tinput.bars = [];\n\t\t\t\t\tprogress.draw();\n\t\t\t\t\tprogress.load();\n\t\t\t\t\tprogress.draw();\n\t\t\t\t  }\n\t\t\t\t});\n\t\t\t} else if (opts.chrome === true) {\n\t\t\tchrome.storage.onChanged.addListener(function(changes, namespace) {\n\t\t\t\tif (typeof(changes.lastSave) == \"undefined\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (typeof(input.lastSave) == \"undefined\") {\n\t\t\t\t\tinput.lastSave = 0;\n\t\t\t\t}\n\t\t\t\tupdateTime = changes.lastSave.newValue;\n\t\t\t\tif (input.lastSave !== updateTime) {\n\t\t\t\t\tinput.bars = [];\n\t\t\t\t\tprogress.draw();\n\t\t\t\t\tprogress.load();\n\t\t\t\t\tprogress.draw();\n\t\t\t\t }\n\t\t\t  });\n\t\t\t}\n\t\t\t\n\t\t};\n\n\treturn {\n\t\tload: function(json) {\n\t\t\t/*\n\t\t\tLoad data. If json is specified, load new data. \n\t\t\t*/\n\t\t\t//Initialise dialogs\n\t\t\tprepareDialogs();\n\t\t\t//Load Data\n\t\t\tif (json) {\n\t\t\t\tloadNewData(json);\n\t\t\t} else {\n\t\t\t\tloadData(postLoad);\n\t\t\t}\n\t\t\t\n\t\t\t//Add saving event for page unload\n\t\t\t$(window).unload(function() {\n\t\t\t\tsaveData(true);\n\t\t\t});\n\t\t\t\n\t\t},\n\t\tsave: function() {\n\t\t\t/*Public wrapper for saving.*/\n\t\t\tsaveData();\n\t\t},\n\t\tdraw: function() {\n\t\t\t/*\n\t\tUpdate the progress bar drawing. This implements the \n\t\tEnter-Update-Exit model for D3.\n\t\t\n\t\t*/\n\t\t\tif (input === undefined) {\n\t\t\t\tprogress.load();\n\t\t\t}\n\t\t\tif (opts.debug !== true) {\n\t\t\t\t$(\"#debug\").hide();\n\t\t\t}\n\t\t\tvar container = d3.select(\"#container\")\n\t\t\t\t.style(\"width\", containerWidth);\n\t\t\t\t//.style(\"margin\", \"0 \" + pageMargin + \"px\");\n\n\t\t\tvar slips = container.selectAll(\".slip.active\")\n\t\t\t\t.data(input.bars, function(d) {\n\t\t\t\treturn d.key;\n\t\t\t});\n\n\t\t\t//ENTER\n\t\t\tslips.enter().insert(\"div\", \".slip.disabled\")\n\t\t\t\t.attr(\"class\", \"slip active ui-widget-content\")\n\t\t\t\t.call(enter);\n\n\t\t\t//UPDATE\n\t\t\tslips.call(update);\n\n\t\t\t//EXIT\n\t\t\tslips.exit().transition()\n\t\t\t\t.duration(300)\n\t\t\t\t.style(\"overflow\", \"hidden\")\n\t\t\t\t.style(\"padding\", 0 + \"px 0\")\n\t\t\t\t.style(\"height\", 0 + \"px\")\n\t\t\t\t.remove();\n\t\t},\n\t\tadd: function() {\n\t\t\tdraw.editDialog();\n\t\t},\n\t\treset: function() {\n\t\t\t$(\".delete.dialog\").dialog(\"open\");\n\t\t},\n\t\texportData: function() {\n\t\t\t/* Show a window with the full data string for the app */\n\t\t\t$(\".export.dialog\").dialog(\"open\");\n\t\t\t\n\t\t},\n\t\timportData: function() {\n\t\t\t/* Show a window where you can input previously output data. */\n\t\t\t$(\".import.dialog\").dialog(\"open\");\n\t\t},\n\t\tsettingsMenu: function() {\n\t\t\t$(\".settings.menu.dialog\").dialog(\"open\");\n\t\t}\n\t};\n})();\nvar fullTimeToMs = function(str) {\n\t\t\t/*\n\t\t\tTakes string in format hh:mm:ss and converts to milliseconds\n\t\t\t*/\n\t\t\tstr = str.split(\":\");\n\t\t\treturn (str[0] * 60 * 60 * 1000) + (str[1] * 60 * 1000) + (str[2] * 1000);\n\t\t};\n\n//AddEvent via http://html5demos.com/js/h5utils.js\nvar addEvent = (function () {\n  if (document.addEventListener) {\n    return function (el, type, fn) {\n      if (el && el.nodeName || el === window) {\n        el.addEventListener(type, fn, false);\n      } else if (el && el.length) {\n        for (var i = 0; i < el.length; i++) {\n          addEvent(el[i], type, fn);\n        }\n      }\n    };\n  } else {\n    return function (el, type, fn) {\n      if (el && el.nodeName || el === window) {\n        el.attachEvent('on' + type, function () { return fn.call(el, window.event); });\n      } else if (el && el.length) {\n        for (var i = 0; i < el.length; i++) {\n          addEvent(el[i], type, fn);\n        }\n      }\n    };\n  }\n})();\n\n//Main onload script\njQuery(document).ready(function() {\n\tprogress.load();\n\tprogress.draw();\n\t\n\t//DEBUGGING\n\tvar timer;\n\ttimer = window.setInterval(function() {\n\t\tprogress.draw();\n\t}, 1000);\n\n\t$(\".add-question, .header .add.button\").click(progress.add);\n\t$(\"#set\").button().click(function() {\n\t\ttimer = window.setInterval(function() {\n\t\t\tprogress.draw();\n\t\t}, 1000);\n\t});\n\t$(\"#clear\").button().click(function() {\n\t\tclearInterval(timer);\n\t});\n\t$(\"#debug\").button().click(function(){\n\t\t$(\".debug.dialog\").dialog(\"open\");\n\t});\n\t$(\".header .tips.button\").click(function(){\n\t\t$(\".tips.dialog\").dialog(\"open\");\n\t});\n\t$(\".header .help.button\").click(function(){\n\t\t$(\".introduction.dialog\").dialog(\"open\");\n\t});\n\t$(\"#reset\").button().click(progress.reset);\n\t$(\"#export\").button().click(progress.exportData);\n\t$(\"#import\").button().click(progress.importData);\n\t$(\".header .settings.button\").click(progress.settingsMenu);\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":44007}]],"length":44007}
{"contributors":[],"silentsave":false,"ts":1359435707069,"patch":[[{"diffs":[[0,"n = "],[-1,"17"],[1,"5"],[0,"0,\n\t"]],"start1":2101,"start2":2101,"length1":10,"length2":9}]],"length":44006,"saved":false}
